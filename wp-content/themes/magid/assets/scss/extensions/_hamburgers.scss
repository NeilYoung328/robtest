/* CSS Hamburgers
----------------------------------------------- */

// Settings
// ==================================================
$hamburger-padding-x: 15px !default;
$hamburger-padding-y: 25px !default;
$hamburger-layer-width: 32px !default;
$hamburger-layer-height: 2px !default;
$hamburger-layer-spacing: 7px !default;
$hamburger-layer-color: #000 !default;
$hamburger-layer-border-radius: 4px !default;
$hamburger-hover-opacity: 0.7 !default;
$hamburger-hover-transition-duration: 0.15s !default;
$hamburger-hover-transition-timing-function: linear !default;

// To use CSS filters as the hover effect instead of opacity,
// set $hamburger-hover-use-filter as true and
// change the value of $hamburger-hover-filter accordingly.
$hamburger-hover-use-filter: false !default;
$hamburger-hover-filter: opacity(50%) !default;

// Types (Remove or comment out what you donâ€™t need)
// ==================================================
$hamburger-types: (
        3 dx,
        3 dx-r,
        3 dy,
        3 dy-r,
        arrow,
        arrow-r,
        arrowalt,
        arrowalt-r,
        boring,
        collapse,
        collapse-r,
        elastic,
        elastic-r,
        emphatic,
        emphatic-r,
        slider,
        slider-r,
        spring,
        spring-r,
        stand,
        stand-r,
        spin,
        spin-r,
        squeeze,
        vortex,
        vortex-r
) !default;

.hamburger {
    padding: $hamburger-padding-y $hamburger-padding-x 18px;
    display: inline-block;
    cursor: pointer;
    height: auto;

    transition-property: opacity, filter;
    transition-duration: $hamburger-hover-transition-duration;
    transition-timing-function: $hamburger-hover-transition-timing-function;

    // Normalize (<button>)
    font: inherit;
    color: inherit;
    text-transform: none;
    background-color: transparent;
    border: 0;
    margin: 0;
    overflow: visible;

    &:hover {
        @if $hamburger-hover-use-filter == true {
            filter: $hamburger-hover-filter;
        } @else {
            opacity: $hamburger-hover-opacity;
        }
    }
}

.hamburger-box {
    width: $hamburger-layer-width;
    height: $hamburger-layer-height * 3 + $hamburger-layer-spacing * 2;
    display: inline-block;
    position: relative;
}

.hamburger-label {
    font-weight: 700;
    display: inline-block;
    margin-left: 10px;
    vertical-align: middle;
    text-transform: uppercase;
    line-height: 1;
    position: relative;
    top: -6px;
    color: $black;
    font-size: 12px;
}

.hamburger-inner {
    display: block;
    top: 50%;
    margin-top: $hamburger-layer-height / -2;

    &,
    &::before,
    &::after {
        width: $hamburger-layer-width;
        height: $hamburger-layer-height;
        background-color: $hamburger-layer-color;
        border-radius: $hamburger-layer-border-radius;
        position: absolute;
        transition-property: transform;
        transition-duration: 0.15s;
        transition-timing-function: ease;
    }

    & {
        width: $hamburger-layer-width + 3;
    }

    &::before,
    &::after {
        content: "";
        display: block;
    }

    &::before {
        top: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
    }

    &::after {
        bottom: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
    }
}

@if index($hamburger-types, 3 dx) {
    /*
     * 3DX
     */
    .hamburger--3dx {
        .hamburger-box {
            perspective: $hamburger-layer-width * 2;
        }

        .hamburger-inner {
            transition: transform 0.15s cubic-bezier(0.645, 0.045, 0.355, 1),
            background-color 0s 0.1s cubic-bezier(0.645, 0.045, 0.355, 1);

            &::before,
            &::after {
                transition: transform 0s 0.1s cubic-bezier(0.645, 0.045, 0.355, 1);
            }
        }

        &.is-active {
            .hamburger-inner {
                background-color: transparent;
                transform: rotateY(180deg);

                &::before {
                    transform: translate3d(0, $hamburger-layer-height + $hamburger-layer-spacing, 0) rotate(45deg);
                }

                &::after {
                    transform: translate3d(0, ($hamburger-layer-height + $hamburger-layer-spacing) * -1, 0) rotate(-45deg);
                }
            }
            .icon {
                fill: transparent;
            }
        }
    }
}
