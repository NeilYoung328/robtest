/* Helpers
----------------------------------------------- */

@mixin clearfix() {
    &:before,
    &:after {
        content: " "; /* 1 */
        display: table; /* 2 */
    }
    &:after {
        clear: both;
    }
}

@mixin border-radius($radius) {
    border-radius: $radius;
    -moz-border-radius: $radius;
    -webkit-border-radius: $radius;
}

@mixin grayscale_element($value) {
    -webkit-filter: #{"grayscale(#{$value})"};
    -moz-filter: #{"grayscale(#{$value})"};
    filter: gray;
    filter:#{"grayscale(#{$value})"};
}

/* Grid System
----------------------------------------------- */

// Centered container element
@mixin container-fixed() {
    margin-right: auto;
    margin-left: auto;
    padding-left: ($grid-gutter-width / 2);
    padding-right: ($grid-gutter-width / 2);
    @include clearfix();
}

// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
    margin-left: ($gutter / -2);
    margin-right: ($gutter / -2);
    @include clearfix();
}

/* Responsive utilities
----------------------------------------------- */

@mixin mobile {
    @media (min-width: #{$screen-xs}) {
        @content;
    }
}

@mixin tablet {
    @media (min-width: #{$screen-sm}) {
        @content;
    }
}

@mixin desktop {
    @media (min-width: #{$screen-md}) {
        @content;
    }
}

@mixin desktop-lg {
    @media (min-width: #{$screen-lg}) {
        @content;
    }
}

@mixin responsive-visibility() {
    display: block !important;
    tr & {
        display: table-row !important;
    }
    th &,
    td & {
        display: table-cell !important;
    }
}

@mixin responsive-invisibility() {
    display: none !important;
    tr & {
        display: none !important;
    }
    th &,
    td & {
        display: none !important;
    }
}

@mixin box-shadow($shadow) {
    -webkit-box-shadow: $shadow;
    -moz-box-shadow: $shadow;
    -ms-box-shadow: $shadow;
    box-shadow: $shadow;
}

@mixin opacity($opacity) {
    opacity: $opacity;
    // IE8 filter
    $opacity-ie: ($opacity * 100);
    //  filter: ~"alpha(opacity=@{opacity-ie})";
}

@mixin transition($transition) {
    -webkit-transition: $transition;
    transition: $transition;
}

@mixin transition-delay($transition-delay) {
    -webkit-transition-delay: $transition-delay;
    transition-delay: $transition-delay;
}

@mixin transition-duration($transition-duration) {
    -webkit-transition-duration: $transition-duration;
    transition-duration: $transition-duration;
}

@mixin transition-transform($transition) {
    -webkit-transition: -webkit-transform $transition;
    -moz-transition: -moz-transform $transition;
    -o-transition: -o-transform $transition;
    transition: transform $transition;
}

@mixin rotate($degrees) {
    -webkit-transform: rotate($degrees);
    -ms-transform: rotate($degrees); // IE9+
    transform: rotate($degrees);
}

@mixin scale($ratio) {
    -webkit-transform: scale($ratio);
    -ms-transform: scale($ratio); // IE9+
    transform: scale($ratio);
}

@mixin translate($x, $y) {
    -webkit-transform: translate($x, $y);
    -ms-transform: translate($x, $y); // IE9+
    transform: translate($x, $y);
}

@mixin translateY($y) {
    -webkit-transform: translateY($y);
    -ms-transform: translateY($y); // IE9+
    transform: translateY($y);
}

@mixin translateX($x) {
    -webkit-transform: translateX($x);
    -ms-transform: translateX($x); // IE9+
    transform: translateX($x);
}

@mixin skew($x, $y) {
    -webkit-transform: skew($x, $y);
    -ms-transform: skewX($x) skewY($y);
    transform: skew($x, $y);
}

@mixin translate3d($x, $y, $z) {
    -webkit-transform: translate3d($x, $y, $z);
    transform: translate3d($x, $y, $z);
}

@mixin backface-visibility($visibility) {
    -webkit-backface-visibility: $visibility;
    -moz-backface-visibility: $visibility;
    backface-visibility: $visibility;
}

@mixin box-sizing($boxmodel) {
    -webkit-box-sizing: $boxmodel;
    -moz-box-sizing: $boxmodel;
    box-sizing: $boxmodel;
}

@mixin placeholder {
    &::-webkit-input-placeholder {
        @content;
    }

    &:-moz-placeholder { /* Firefox 18- */
        @content;
    }

    &::-moz-placeholder {  /* Firefox 19+ */
        @content;
    }

    &:-ms-input-placeholder {
        @content;
    }
}

@mixin linear-gradient($direction, $color-stops...) {
    // Direction has been omitted and happens to be a color-stop
    @if is-direction($direction) == false {
        $color-stops: $direction, $color-stops;
        $direction: 180deg;
    }

    background: nth(nth($color-stops, 1), 1);
    background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
    background: linear-gradient($direction, $color-stops);
}

@mixin radial-gradient($from, $to) {
    background: -moz-radial-gradient(center, circle cover, $from, $to);
    background: -webkit-radial-gradient(center, circle cover, $from, $to);
    background: -o-radial-gradient(center, circle cover, $from, $to);
    background: -ms-radial-gradient(center, circle cover, $from, $to);
    background: radial-gradient(center, circle cover, $from, $to);
    background-color: $from;
}

/* String Replace
----------------------------------------------- */
@function str-replace($string, $search, $replace: "") {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}

/* Font Face
----------------------------------------------- */
@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
    $src: null;

    $extmods: (
            eot: "?",
            svg: "#" + str-replace($name, " ", "_")
    );

    $formats: (
            otf: "opentype",
            ttf: "truetype"
    );

    @each $ext in $exts {
        $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
        $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
        $src: append($src, url($path + "." + $extmod) format(quote($format)), comma);
    }

    @font-face {
        font-family: quote($name);
        font-weight: $weight;
        src: $src;
    }
}